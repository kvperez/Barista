Barista {

    Program = Statement+

    Statement = FuncDecl
               | ClassDecl
               | VarDecl
               | Primary ("++" | "--")               -- bump
               | Assignment
               | Primary_call
               | IfStmt
               | ForStmt
               | WhileStmt
               | BreakStmt
               | PrintStmt
               | ReturnStmt

    FuncDecl = item id Params "->" Type Block
    ClassDecl = order id "{" Field* MethodDecl* "}"
    MethodDecl = item id Params "->" Type Block
    Field = id ":" Type
    VarDecl = (let | const) id "=" Exp

    Params = "(" ListOf<Param, ","> ")"
    Param = id ":" Type
    Block = "{" Statement* "}"

    Type = "[" Type "]"                         -- array
          | Type "?"                            -- optional
          | id                                  -- id

    Assignment = Primary "=" Exp
    IfStmt = brew Exp Block pull Block          -- with_else
           | brew Exp Block pull IfStmt         -- nested_if
           | brew Exp Block                     -- plain_if
    ForStmt = ristretto id espresso Exp Block
    WhileStmt = blend Exp Block
    BreakStmt = tamp
    PrintStmt = remake Exp
    ReturnStmt = serve Exp

    Exp = Exp0 "?" Exp0 ":" Exp                 -- conditional
          | Exp0
    Exp0 = Exp0 (or Exp)+                       -- or
          | Exp1
    Exp1 = Exp1 (and Exp2)+                     -- and
          | Exp2
    Exp2 = Exp3 relop Exp3                      -- relop
          | Exp3
    Exp3 = Exp3 ("+" | "-") Term                -- addsub
          | Term
    Term = Term ("*" | "/" | "%") Factor        -- muldivmod
          | Factor
    Factor = Primary "**" Factor                -- power
            | Primary
            | ( "-" | not) Primary       	           -- unary
    Primary = Primary ("(" | "?(") ListOf<Exp, ","> ")" ~mut     -- call
            | Primary ("[" | "?[") Exp "]"                       -- subscript
            | Type_array "(" ")" ~mut                            -- emptyarray
            | "[" NonemptyListOf<Exp, ","> "]" ~mut              -- arrayexp
            | "(" Exp ")" ~mut                                   -- parens
            | string ~mut
            | true ~mut
            | false ~mut
            | id                                                 -- id
            | num ~mut

    relop = "<=" | "<" | "==" | "!=" | ">=" | ">"
    mut   = ~"==" "=" | "++" | "--"
    string = "\"" char* "\""
    char = ~control ~"\\" ~"\"" any
          | "\\" ("n" | "t" | "\"" | "\\")                -- escape
          | "\\u{" hex hex? hex? hex? hex? hex? "}"       -- codepoint
    control = "\x00".."\x1f" | "\x80".."\x9f"
    hex = hexDigit

    item = "item" ~idchar
    order = "order" ~idchar
    hopper = "hopper" ~idchar
    shot = "shot" ~idchar
    new = "new" ~idchar
    brew = "brew" ~idchar
    pull = "pull" ~idchar
    ristretto = "ristretto" ~idchar
    espresso = "espresso" ~idchar
    blend = "blend" ~idchar
    tamp = "tamp" ~idchar
    remake = "remake" ~idchar
    serve = "serve" ~idchar
    true = "true" ~idchar
    false = "false" ~idchar
    and = "and" ~idchar
    or = "or" ~idchar
    not = "not" ~idchar
    let = "let" ~idchar
    const = "const" ~idchar

    keyword = item | order | hopper | shot | new | brew | pull 
            | ristretto | espresso | blend | tamp | remake | serve 
            | true | false | and | or | not | let | const
    id = ~keyword letter idchar*
    idchar = alnum | "_" | letter

    num = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    space += "//" (~"\n" any)*                  -- comment

}